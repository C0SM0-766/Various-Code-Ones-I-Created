campaignTrail_temp.election_json = [
    {
        "model": "campaign_trail.election",
        "pk": 10,
        "fields": {
            "year": 1976,
            "summary": "Fucking piece of shit \"President\" Ford got shoved into the fucking Oval Office like a fucking placeholder, not a single fucking vote cast for his sorry fucking ass. Any hope of fixing the shitshow left behind by Watergate went straight to fucking hell the second he bent over and fucking pardoned Nixon's crooked fucking ass. Ford didn't earn a goddamn thing he had the presidency handed to him on a shit-stained platter, and in the process, he managed to piss off just about fucking everyone: his party, the public, and anyone dumb enough to believe this country still had its shit together.<br><br>Now Ford's stuck in the big chair he didn't fucking earn, wallowing in Nixon's stench while trying to govern a nation that doesn't trust his sorry ass. The next two years will decide if he can scrape together even a shred of fucking dignity or just drag his party down in flames for the '76 election. Hell, the dumb fuck might even try running for a term of his own-because if Ford's proven anything, it's that he's a goddamn pro at fucking shit up beyond repair...",
            "image_url": "https://files.catbox.moe/lqe647.jpg",
            "winning_electoral_vote_number": 270,
            "advisor_url": "https://files.catbox.moe/h9ovdl.jpg",
            "recommended_reading": "<h4 style=\"margin-top: 0.5em;\">1976 Election Books and Biographies</h4><a href=\"http://www.amazon.com/exec/obidos/ASIN/0670454613/amhius20-20\" target=\"_blank\">Jules Witcover - Marathon: The Pursuit of the Presidency, 1972-1976</a></br><a href=\"http://www.amazon.com/exec/obidos/ASIN/1590843630/amhius20-20\" target=\"_blank\">The Election of 1976 and the Administration of Jimmy Carter</a></br><a href=\"http://www.amazon.com/exec/obidos/ASIN/B007V955ZS/amhius20-20\" target=\"_blank\">Craig Shirley - Reagan's Revolution: The Untold Story of the Campaign That Started It All</a></br><a href=\"http://www.amazon.com/exec/obidos/ASIN/B001KBY7YI/amhius20-20\" target=\"_blank\">Douglas Brinkley - Gerald R. Ford</a></br><a href=\"http://www.amazon.com/exec/obidos/ASIN/0805089578/amhius20-20\" target=\"_blank\">Julian E. Zelizer - Jimmy Carter</a>",
            "has_visits": 1,
            "no_electoral_majority_image": "https://www.jetsimon.com/public/static/images/2012-no-majority.jpg",
            "creator": "Dan Bryan",
            "display_year": "1976 - The Death Of Honesty"
        }
    }
]

campaignTrail_temp.candidate_json = [
    {
        "model": "campaign_trail.candidate",
        "pk": 92,
        "fields": {
            "first_name": "Gerald",
            "last_name": "Ford",
            "election": 10,
            "party": "Republican",
            "state": "Michigan",
            "priority": 1,
            "description": "Gerald R. Ford has been many things: a jock, a naval officer, a Congressman, a Vice President, and now America's first unelected President. For most of his career, people thought he was a decent guy, a man of integrity. But when shit fucking hit the fan, he didn't have the fucking balls to live up to that fucking reputation. After Nixon blew the country to hell with fucking Watergate, the nation was desperate for accountability. The people wanted the fucking bastard punished, but the fucking political machine had other plans.<br><br>And then the \"Republican\" Party came up with a brilliant fucking idea: hand fucking idiot Ford the fucking presidency on a fucking silver platter, and in return, he'd pardon Nixon's lying, criminal ass. Ford wiped the slate clean for the biggest goddamn crook in American history, spitting in the face of every American who wanted justice. Accountability? Dead and buried. Trust in government? Gone to shit. But hey, it's all worth it for \"healing the nation,\" right, Gerald? Fuck that.",
            "color_hex": "#0000FF",
            "secondary_color_hex": "#90C0FF",
            "is_active": 1,
            "image_url": "https://files.catbox.moe/7jv5lo.png",
            "electoral_victory_message": "<h3>Congratulations! You have won the 1976 Presidential Election.</h3><p>Hopefully you can make good on your promises to clean up Washington and change the political and moral culture of the country. If you are successful, there is no reason you cannot run for reelection in 1980. Just be wary of any economic problems, or of some foreign policy crisis that could dent your popularity.</p>",
            "electoral_loss_message": "<h3>Sorry, you have lost the 1976 Presidential Election.</h3><p>As an outsider candidate, this was really your moment to make an impact on American politics and to win a national election. The beltway gossip already has it that Ted Kennedy is the frontrunner for the 1980 nomination. Perhaps you can run again for Governor of Georgia, or make an impact in some other way.</p>",
            "no_electoral_majority_message": "<h3>Wow! You have won in a squeaker.</h3><p>While the Electoral College ended in a tie, the Democrats have a huge advantage in the House of Representatives and are sure to elect you in that manner. Hopefully the closeness of this election doesn't undermine your promises to clean up Washington and unite the people of this country.</p>",
            "description_as_running_mate": "''",
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 91,
        "fields": {
            "first_name": "Mr.",
            "last_name": "Democrat",
            "election": 10,
            "party": "Democratic",
            "state": "TBD",
            "priority": 2,
            "description": "Dumbass nope",
            "color_hex": "#FF0000",
            "secondary_color_hex": "#FFA0A0",
            "is_active": 0,
            "image_url": "https://www.jetsimon.com/public/static/images/gerald-ford-1976.jpg",
            "electoral_victory_message": "<h3>Congratulations! You have won the 1976 Presidential Election.</h3><p>Hopefully you can continue to help the United States recover from the Watergate Scandal, the recent recession, and the debacle of Vietnam. In either case, this will be your final term as President. Speculation is sure to be intense on who will replace you. Will it be Ronald Reagan? Ted Kennedy? Or someone else entirely?</p>",
            "electoral_loss_message": "<h3>Sorry, you have lost the 1976 Presidential Election.</h3><p>Hopefully your opponent can make good on his promises to clean up Washington and change the political and moral culture of the country. Perhaps you can still play a role in 1980, or seek your old Congressional leadership positions. In any case, you can still take solace in the fact that you did the right thing by pardoning Nixon and moving the country beyond the Watergate episode.</p>",
            "no_electoral_majority_message": "<h3>Sorry, you have lost the 1976 Presidential Election.</h3><p>While the Electoral College ended in a tie, the Democrats have a huge advantage in the House of Representatives and are sure to elect your opponent in that manner. Perhaps you can still play a role in 1980, or seek your old Congressional leadership positions. In any case, you can still take solace in the fact that you did the right thing by pardoning Nixon and moving the country beyond the Watergate episode.</p>",
            "description_as_running_mate": "''",
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 93,
        "fields": {
            "first_name": "Eugene",
            "last_name": "McCarthy",
            "election": 10,
            "party": "Independent",
            "state": "Minnesota",
            "priority": 3,
            "description": "''",
            "color_hex": "#00C100",
            "secondary_color_hex": "#A1FFA1",
            "is_active": 0,
            "image_url": "''",
            "electoral_victory_message": "''",
            "electoral_loss_message": "''",
            "no_electoral_majority_message": "''",
            "description_as_running_mate": "''",
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 94,
        "fields": {
            "first_name": "Other",
            "last_name": "Candidates",
            "election": 10,
            "party": "Independent",
            "state": "Alaska",
            "priority": 4,
            "description": "''",
            "color_hex": "#FFFF00",
            "secondary_color_hex": "#FFFFC0",
            "is_active": 0,
            "image_url": "''",
            "electoral_victory_message": "''",
            "electoral_loss_message": "''",
            "no_electoral_majority_message": "''",
            "description_as_running_mate": "''",
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 95,
        "fields": {
            "first_name": "Nelson",
            "last_name": "Rockefeller",
            "election": 10,
            "party": "Republican",
            "state": "New York",
            "priority": 5,
            "description": "''",
            "color_hex": "#0000FF",
            "secondary_color_hex": "#90C0FF",
            "is_active": 0,
            "image_url": "https://files.catbox.moe/92byh3.png",
            "electoral_victory_message": "''",
            "electoral_loss_message": "''",
            "no_electoral_majority_message": "''",
            "description_as_running_mate": "Rocky's everything \"Ford\" will never fucking beâ€“He's rich as fucking hell, sharp as a fucking blade, and powerful enough to fucking crush anyone dumb enough to get in his fucking way. Ford's a bland, spineless fucking bore, while Rockefeller walks into any room and makes it his fucking bitch without even trying. He doesn't waste his fucking time on bullshit like fucking committee meetings or pandering to nobodies in Bumfuck, USA. His fucking idea of a good time is sitting in his fucking penthouse, surrounded by fucking art worth more than Ford's entire fucking existence, making the kind of fucking calls that decide who rises and who fucking falls.<br><br>Rockefeller didn't fucking take the VP job because he gave a fuck about Ford or his fucking pathetic milquetoast presidency. He thought he'd get real fucking power-reshape cities, drag the GOP into the fucking modern era, and etch his name in the fucking history books. But instead, Ford's weak-ass fucking leadership has turned the fucking administration into a goddamn joke, dragging Rockefeller's reputation down with it. If things don't change soon, he'll go back to New York, where he can actually make a fucking difference instead of wasting his time cleaning up this circus of fucking incompetence.",
            "candidate_score": 0,
            "running_mate": true
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 96,
        "fields": {
            "first_name": "Mr.",
            "last_name": "Democrat VP",
            "election": 10,
            "party": "Democratic",
            "state": "TBD",
            "priority": 6,
            "description": "''",
            "color_hex": "#0000FF",
            "secondary_color_hex": "#90C0FF",
            "is_active": 0,
            "image_url": "https://www.jetsimon.com/public/static/images/frank-church-1976.jpg",
            "electoral_victory_message": "''",
            "electoral_loss_message": "''",
            "no_electoral_majority_message": "''",
            "description_as_running_mate": "<p>Frank Church is a Senator from Idaho, and one of Carter's rivals in the 1976 primaries. He is known for his opposition to the Vietnam War, and his investigations of America's intelligence bureaus. Both of these factors make him appealing to the anti-war bloc of the Democratic Party, and have made him a well-known, national figure in politics. He is also outgoing and charismatic, and could overshadow a more soft-spoken Carter.</p>",
            "candidate_score": 0,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 103,
        "fields": {
            "first_name": "...",
            "last_name": "Other",
            "election": 10,
            "party": "Independent",
            "state": "Alaska",
            "priority": 13,
            "description": "''",
            "color_hex": "#00C100",
            "secondary_color_hex": "#A1FFA1",
            "is_active": 0,
            "image_url": "''",
            "electoral_victory_message": "''",
            "electoral_loss_message": "''",
            "no_electoral_majority_message": "''",
            "description_as_running_mate": "''",
            "candidate_score": 0,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 104,
        "fields": {
            "first_name": "...",
            "last_name": "Other",
            "election": 10,
            "party": "Independent",
            "state": "Alaska",
            "priority": 14,
            "description": "''",
            "color_hex": "#FFFF00",
            "secondary_color_hex": "#FFFFC0",
            "is_active": 0,
            "image_url": "''",
            "electoral_victory_message": "''",
            "electoral_loss_message": "''",
            "no_electoral_majority_message": "''",
            "description_as_running_mate": "''",
            "candidate_score": 0,
            "running_mate": false
        }
    }
]

campaignTrail_temp.running_mate_json = [
    {
        "model": "campaign_trail.running_mate",
        "pk": 143018,
        "fields": {
            "candidate": 92,
            "running_mate": 95
        }
    }
]

campaignTrail_temp.credits = "Burrito"

campaignTrail_temp.global_parameter_json = [
    {
        "model": "campaign_trail.global_parameter",
        "pk": 1,
        "fields": {
            "vote_variable": 1.125,
            "max_swing": 0.12,
            "start_point": 0.94,
            "candidate_issue_weight": 10,
            "running_mate_issue_weight": 3,
            "issue_stance_1_max": -0.71,
            "issue_stance_2_max": -0.3,
            "issue_stance_3_max": -0.125,
            "issue_stance_4_max": 0.125,
            "issue_stance_5_max": 0.3,
            "issue_stance_6_max": 0.71,
            "global_variance": 0.01,
            "state_variance": 0.005,
            "question_count": 31,
            "default_map_color_hex": "#C9C9C9",
            "no_state_map_color_hex": "#999999"
        }
    }
]

campaignTrail_temp.opponents_default_json = [
    {
        "election": 10,
        "candidates": [
            92,
            91,
            93,
            94,
            96,
            103,
            104
        ]
    }
]

campaignTrail_temp.opponents_weighted_json = [
    {
        "election": 10,
        "candidates": [
            92,
            91,
            93,
            94,
            96,
            103,
            104
        ]
    }
]

campaignTrail_temp.temp_election_list = [
    {
        "id": 10,
        "year": 1976,
        "is_premium": 0,
        "display_year": "1976 - The Death Of Honesty"
    }
]

jet_data = {
    "headerColor": "#785e17",
    "windowColor": "#a89971",
    "containerColor": "#949494",
    "innerWindowColor": "#785e17",
    "bannerImageUrl": "https://i.postimg.cc/zDWbk7GX/RDT-20250525-1109253459504140879372331.jpg",
    "backgroundImageUrl": "https://res.cloudinary.com/aenetworks/image/upload/c_fill,w_1920,h_1254,g_auto/dpr_auto/f_auto/q_auto:eco/v1/nixon-anti-war-protest-gettyimages-515574696?_a=BAVAZGDX0",
    "endingTextColor": "#ffffff",
    "customQuote": "",
    "gameTitle": "THE DEATH OF HONESTY"
}

//#startcode


corrr = '\n              <h2>THE DEATH OF HONESTY</h2>\n            ';


nct_stuff.themes[nct_stuff.selectedTheme].coloring_title = "#785e17";

nct_stuff.themes[nct_stuff.selectedTheme].coloring_window = "#a89971";

document.getElementsByClassName("game_header")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title;

$("#game_window")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_window;

$(".container")[0].style.backgroundColor = "#949494";

$("#game_window")[0].style.backgroundImage = "url(https://files.catbox.moe/ma6eu6.png)"

$("#game_window")[0].style.borderColor = "#785e17"

$(".container")[0].style.border = ".2em solid #785e17"

document.getElementById("header").src = "https://i.postimg.cc/zDWbk7GX/RDT-20250525-1109253459504140879372331.jpg";

document.body.background = "https://res.cloudinary.com/aenetworks/image/upload/c_fill,w_1920,h_1254,g_auto/dpr_auto/f_auto/q_auto:eco/v1/nixon-anti-war-protest-gettyimages-515574696?_a=BAVAZGDX0";

document.head.innerHTML += "<style>#results_container {color:#785e17;} .inner_window_w_desc {background-color:#a89971!important;}</style>";

document.getElementById("inner_window_1").children[1].innerHTML =  `<li>Welcome to <b><span style="color: #785e17;">The Death Of Honesty</span></b>.</li><li>A deeply cynical mod where the player plays as Gerald Ford from 1974-1977.</li><li>You will answer questions about your platform, positions, and about your campaign strategy.</li><li>The answers will affect your popularity for better or worse, both nationwide and in individual states.</li><li>Walk the fine line between appealing to your base and winning a majority of the votes.</li><li>Additionally, the game contains Choose Your Own Adventure elements, secret endings and achievements.</li><li>Content Warning: This mod's writing contains large amounts of profanity and instances of other explicit content.</li>`;

campaignTrail_temp.modBoxTheme = {
  "header_color": "#785e17",
  "header_text_color": "#ffffff",
  "description_text_color": "#ffffff",
  "description_background_color": "#a89971",
  "main_color": "#949494",
  "secondary_color": "#785e17",
 "ui_text_color": "#ffffff"
}

RecReading=true

  campaignTrail_temp.credits = "<button onclick='credits()'>The FUCK GERALD FORD Team</button>";
  
  credits = function() {
    credits = ["CREDITS", "Burrito - Writing, Theme, & Banner", "C0SM0 - Coding, Images, & soundtrack", "", "Some codes made by DecStarG & Thatchmaster.", "", "Idk who else on the supposed team worked on this lmao", "so sad this Vivziepop ahh mod is abandoned"]
    text = "CREDITS:\n\n"
    for (i in credits) {
        text += credits[i] + "\n"
    }
    alert(text)
  }

HistHexcolour=["#1072a1","#a11510","#db8223","#2ca853"];
    HistName=[" Ted Kennedy"," Not Gerald Ford"," Roger MacBride"," Eugene McCarthy"];
    HistEV=[439,99,0,0];
    HistPV=["42,306,212","37,618,057","788,841","636,422"];
    HistPVP=["52.0%","46.3%","1.0%","0.8%"];

    e.SelectText = "Please select the election you will lose in:"
    e.CandidText = "Please select your unelected president:"
    e.VpText = "Please select your unelected vice president:"

// Select the node that will be observed for mutations
const windowsAdvisorTargetNode = document.getElementById("game_window");

// Options for the observer (which mutations to observe)
const windowsAdvisorConfig = { attributes: true, childList: true, subtree: true };

// Callback function to execute when mutations are observed
const callback = (mutationList, observer) => {
let visitWindow = document.getElementsByClassName("overlay_window")[0];
if (!visitWindow || visitWindow.classList.contains("done")) return;
visitWindow.classList.add("done", "window");
let titleBar = visitWindow.querySelector("h3");
titleBar.classList.add("title-bar", "title-bar-text");
titleBar.style.paddingLeft = "3px";
};

async function appendStyle() {
var metaTag=document.createElement('meta');
metaTag.name = "viewport";
metaTag.content = "width=device-width, initial-scale=1";
document.getElementsByTagName('head')[0].appendChild(metaTag);

if (!document.querySelector('#radio-option-style')) {
    let style = document.createElement('style');
    style.type = 'text/css';
    style.id = 'radio-option-style';
    style.innerHTML = `
    .inner_inner_window {
    display: flex;
    flex-direction: column;
    }
    .inner_inner_window h3{
        padding: 5px;
    }

    #candidate_pic,
    #running_mate_pic,
    .inner_window_sign_display {
        height: 167px;
    }
    #candidate_pic {
        margin-left: 160px;
    }
    #running_mate_pic {
        margin-right: 160px;
    }
    `;

    document.head.appendChild(style);
}
}
appendStyle();

e = campaignTrail_temp;

const startScreenUpdater = setInterval(function() {
const goBackButton = document.getElementById("candidate_id_back");
const candidateButton = document.getElementById("candidate_id_button");
const runningMateButton = document.getElementById("running_mate_id_button");
const finalScreenBB = document.getElementById("opponent_selection_id_back");
const finalScreenID = document.getElementById("opponent_selection_id_button");
const gameType = document.getElementById("game_type_id");

// Check if the candidate_id element exists to avoid errors
const candidateElement = document.getElementById("candidate_id");
if (!candidateElement) {
  return;  
}

var c = candidateElement.value;

if (c == 23 && !candidateButton && !runningMateButton) {
  if (goBackButton) {
    goBackButton.click();
  }
  
  const initContinue = document.getElementById("election_id_button");
  if (initContinue) {
    initContinue.click();  
  }
} 

else if ((c == 24 || c == 25) && candidateButton && !runningMateButton) { 
  candidateButton.remove();
}

if (!candidateButton && runningMateButton) { 
  runningMateButton.click();

  const finalBack = document.getElementById("opponent_selection_id_back");
  if (finalBack) {
    finalBack.remove();  
  }


  if (window.observer) {
    window.observer.disconnect();
  }
}


if (finalScreenID) {
  if (finalScreenBB) {
    finalScreenBB.remove();  
  }
  clearInterval(startScreenUpdater);  
}
}, 100);  


class Song {
constructor(title, artist, coverLink, audioLink) {
  this.title = title;
  this.artist = artist;
  this.coverLink = coverLink;
  this.audioLink = audioLink;
}
getTitle() {
  return this.title;
}

getArtist() {
  return this.artist;
}

getCoverLink() {
  return this.coverLink;
}

getAudioLink() {
  return this.audioLink;
}
}

class Playlist {
constructor() {
  this.songs = [];
  this.currentSongIndex = 0;
}

addSong(song) {
  this.songs.push(song);
}

getCurrentSong() {
  return this.songs[this.currentSongIndex];
}

playNext() {
  this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;
}

playPrevious() {
  this.currentSongIndex = (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;
}
}
window.Playlist=Playlist
window.Song=Song

function changePlaylist(newPlaylist) {
playlist = newPlaylist;
playlist.currentSongIndex = 0;
updateUI(playlist);
const audio = document.getElementById("audio");
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio();
audio.play();
}
window.changePlaylist=changePlaylist

function updateUI(playlist) {
  const currentSong = playlist.getCurrentSong();
  var player = document.getElementById("player");
  player.querySelector("#cover").src = currentSong.getCoverLink();
  player.querySelector("#title").textContent = currentSong.getTitle();
  player.querySelector("#artist").textContent = currentSong.getArtist();
}

window.updateUI=updateUI

let getAudioAmplitude = (time) => 0;

async function decodeAudio(audioSrc) {
try {
  const audioContext = new AudioContext();
  const response = await fetch(audioSrc);
  const arrayBuffer = await response.arrayBuffer();
  const buffer = await audioContext.decodeAudioData(arrayBuffer);

  const sampleRate = buffer.sampleRate;
  const totalSamples = buffer.length;
  const numChannels = buffer.numberOfChannels;

  // Reduce memory usage by processing every 32nd sample
  const downsampleFactor = 32;
  const reducedSize = Math.floor(totalSamples / downsampleFactor);
  
  let amplitudes = new Float32Array(reducedSize);
  let meanAmplitude = 0;

  for (let i = 0; i < reducedSize; i++) {
    let sum = 0;
    for (let channel = 0; channel < numChannels; channel++) {
      sum += buffer.getChannelData(channel)[i * downsampleFactor] ** 2; 
    }
    amplitudes[i] = sum / numChannels; 
    meanAmplitude += amplitudes[i];
  }

  meanAmplitude /= reducedSize;

  getAudioAmplitude = function (time) {
    const delay = 0.17;
    let index = Math.floor((time + delay) * sampleRate / downsampleFactor);
    index = Math.min(index, reducedSize - 1);
    let amplitudeNorm = amplitudes[index] / (2 * meanAmplitude);
    return Math.min(amplitudeNorm, 1);
  };

  console.log("Audio decoded successfully!");

} catch (error) {
  console.error("Error decoding audio:", error);
}
}

  
function setupMusicPlayer() {

playlist = new Playlist();

const song1 = new Song(
  "Still I'm Sad",
  "The Yardbirds",
  "https://f4.bcbits.com/img/a1814672821_16.jpg",
  "https://files.catbox.moe/aahq77.mp3"
);

const song2 = new Song(
  "You Haven't Done Nothin'",
  "Stevie Wonder",
  "https://upload.wikimedia.org/wikipedia/en/9/9b/Swonderdonenothin.jpg",
  "https://file.garden/Zrv1pPC1HzBK0svl/You%20Haven't%20Done%20Nothin'.mp3"
);

const song3 = new Song(
  "What Is Truth",
  "Johnny Cash",
  "https://upload.wikimedia.org/wikipedia/en/4/46/What-Is-Truth-Cash.jpg",
  "https://files.catbox.moe/fnbnu7.mp3"
);

const song3a = new Song(
"The War Drags On",
"Donovan",
"https://files.catbox.moe/ud0zsl.jpg",
"https://files.catbox.moe/snpehf.mp3"
);

const song4 = new Song(
"Ball Of Confusion",
"The Temptations",
"https://upload.wikimedia.org/wikipedia/en/e/e5/Ball_of_Confusion_%28That%27s_What_the_World_Is_Today%29_%28album_cover%29.jpg",
"https://files.catbox.moe/yskxkm.mp3"
);

const song5 = new Song(
"What's Going On",
"Marvin Gaye",
"https://upload.wikimedia.org/wikipedia/en/8/84/MarvinGayeWhat%27sGoingOnalbumcover.jpg",
"https://files.catbox.moe/s5u6yq.mp3"
);

const song6 = new Song(
"Happiest Crook",
"Miller & Jones",
"https://files.catbox.moe/5pilpb.jpg",
"https://files.catbox.moe/qevtqb.mp3"
);

const song7 = new Song(
"Loser, Baby",
"Hazbin Hotel OST",
"https://upload.wikimedia.org/wikipedia/en/thumb/3/32/Hazbin_Hotel_Original_Soundtrack.webp/316px-Hazbin_Hotel_Original_Soundtrack.webp.png",
"https://files.catbox.moe/2y93h7.mp3"
);

playlist.addSong(song1);
playlist.addSong(song2);
playlist.addSong(song3);
playlist.addSong(song3a);
playlist.addSong(song4);
playlist.addSong(song5);
playlist.addSong(song6);
playlist.addSong(song7);

const playerContainer = document.createElement("div");
playerContainer.id = "player";

const displayBox = document.createElement("div");
displayBox.id = "display-box";

const coverElement = document.createElement("img");
coverElement.id = "cover";
displayBox.appendChild(coverElement);

const infoContainer = document.createElement("div");
infoContainer.id = "info-container";
infoContainer.style.backgroundImage = "url('https://i.imgur.com/BSXotSO.png')";
infoContainer.style.backgroundSize = "cover"; // Optional: adjust based on your needs
infoContainer.style.color = "#cfcfcf"; // Set text color to white
infoContainer.style.position = 'relative';
// Create the needle image element
const needle = document.createElement("img");
needle.id = "needle";
needle.src = "https://i.imgur.com/ohd0XR3.png";
infoContainer.appendChild(needle);


const songInfo = document.createElement("div");
songInfo.id = "song-info";

const titleElement = document.createElement("h3");
titleElement.id = "title";
titleElement.style.fontWeight = 'normal'; // Make it normal as per previous request
songInfo.appendChild(titleElement);

const artistElement = document.createElement("p");
artistElement.id = "artist";
songInfo.appendChild(artistElement);

infoContainer.appendChild(songInfo);
displayBox.appendChild(infoContainer);

playerContainer.appendChild(displayBox);

const controlsContainer = document.createElement("div");
controlsContainer.id = "controls-container";

const controls = document.createElement("div");
controls.id = "controls";

// Create the image element for the button
const prevButton = document.createElement("img");
prevButton.id = "prevButton";
prevButton.src = "https://i.imgur.com/Zkk16Uy.png"; // Default image
prevButton.alt = "Previous";
controls.appendChild(prevButton);

// Add event listeners for mousedown and mouseup
prevButton.addEventListener("mousedown", function() {
  prevButton.style.filter = "brightness(0.4)";
});

prevButton.addEventListener("mouseup", function() {
  prevButton.style.filter = "brightness(1)";
});


prevButton.addEventListener("mouseleave", function() {
  prevButton.style.filter = "brightness(1)";
});

const playPauseButton = document.createElement("img");
playPauseButton.id = "playPauseButton";
playPauseButton.src = "https://i.imgur.com/LxQnVBj.png"; // Set the default Pause image
playPauseButton.alt = "Play/Pause";
controls.appendChild(playPauseButton);

const nextButton = document.createElement("img");
nextButton.id = "nextButton";
nextButton.src = "https://i.imgur.com/P39RRW4.png"; // Default image for "Next"
nextButton.alt = "Next";
controls.appendChild(nextButton);


nextButton.addEventListener("mousedown", function() {
  nextButton.style.filter = "brightness(0.4)";
});

nextButton.addEventListener("mouseup", function() {
  nextButton.style.filter = "brightness(1)";
});


nextButton.addEventListener("mouseleave", function() {
  nextButton.style.filter = "brightness(1)";
});

controlsContainer.appendChild(controls);

// Play/Pause functionality with image toggle
playPauseButton.addEventListener("click", function () {
  const audio = document.getElementById("audio");
  if (audio.paused) {
    audio.play();
    playPauseButton.src = "https://i.imgur.com/LxQnVBj.png"; // Pause image
  } else {
    audio.pause();
    needle.style.transform = "rotate(-45deg)";
    playPauseButton.src = "https://i.imgur.com/Kb4y3wX.png"; // Set the play image
    updateProgressBar();
  }
});


// Press effect for the play/pause button
playPauseButton.addEventListener("mousedown", function() {
    playPauseButton.style.filter = "brightness(0.4)"; 
});


playPauseButton.addEventListener("mouseup", function() {
    playPauseButton.style.filter = "brightness(1)"; 
});

playPauseButton.addEventListener("mouseleave", function() {
    playPauseButton.style.filter = "brightness(1)"; 
});

nextButton.addEventListener("click", function () {
playlist.playNext();
updateUI(playlist);
const audio = document.getElementById("audio");
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio(audio.src);
audio.play();
});

prevButton.addEventListener("click", function () {
playlist.playPrevious();
updateUI(playlist);
const audio = document.getElementById("audio");
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio(audio.src);
audio.play();
});



// Create the progress bar container
const progressBarContainer = document.createElement("div");
progressBarContainer.id = "progress-bar-container";

// Create the progress bar slider
const progressBar = document.createElement("input");
progressBar.type = "range"; // Change to range type for a slider
progressBar.id = "progress-bar";
progressBar.value = "0";
progressBar.max = "100";
progressBar.step = "0.1"; // Optional: sets the granularity of the slider

progressBarContainer.appendChild(progressBar);
controlsContainer.appendChild(progressBarContainer);
playerContainer.appendChild(controlsContainer);

const volumeContainer = document.createElement("div");
volumeContainer.id = "volume-container";

const volumeLabel = document.createElement("img");
volumeLabel.src = "https://i.imgur.com/jjUzV10.png"; // Set the volume image
volumeLabel.alt = "Volume";
volumeContainer.appendChild(volumeLabel);

const volumeSliderContainer = document.createElement("div");
volumeSliderContainer.classList.add("is-vertical");
volumeSliderContainer.style.marginLeft = "23%";
volumeSliderContainer.style.height = "126px";

const volumeSlider = document.createElement("input");
volumeSlider.type = "range";
volumeSlider.id = "volumeSlider";
volumeSlider.min = 0;
volumeSlider.max = 9;
volumeSlider.step = 1;
volumeSlider.value = 3; // Initial volume

volumeSliderContainer.appendChild(volumeSlider);

const volumeDisplay = document.createElement("span");
volumeDisplay.id = "volume-display";
volumeDisplay.style.fontWeight = 'bold'; 
volumeDisplay.style.display = 'none';
volumeDisplay.textContent = "1";

volumeContainer.appendChild(volumeSliderContainer);
volumeContainer.appendChild(volumeDisplay);

playerContainer.appendChild(volumeContainer);

gameWindow_player.insertAdjacentElement("afterend", playerContainer);


// Update progress bar as the song plays
function updateProgressBar() {
const audio = document.getElementById("audio");
const progress = (audio.currentTime / audio.duration) * 100;
progressBar.value = progress;

const MIN_DEG = -45, MAX_DEG = 45;

// If paused, use amplitude=0 so it rotates to -45.
let amplitude = audio.paused 
                ? 0 
                : getAudioAmplitude(audio.currentTime);

let degrees = MIN_DEG + amplitude * (MAX_DEG - MIN_DEG);
needle.style.transform = "rotate(" + degrees + "deg)";
}


// Seek functionality when the slider is moved
progressBar.addEventListener("input", function () {
  const audio = document.getElementById("audio");
  const seekTime = (progressBar.value / 100) * audio.duration;
  audio.currentTime = seekTime;
});

// Setup the audio element and event listeners
const audio = document.createElement("audio");
audio.id = "audio";
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio(audio.src);
audio.volume = 1 / 9;

audio.addEventListener("timeupdate", updateProgressBar);
audio.addEventListener("ended", function () {
  // Play the next song when the current song ends
  playlist.playNext();
  updateUI(playlist);
  audio.src = playlist.getCurrentSong().audioLink;
  decodeAudio(audio.src);
  audio.play();
});

  let currentVolume = 1; // Initial volume

volumeSlider.addEventListener("input", function () {
  currentVolume = parseInt(volumeSlider.value, 10);
  updateVolumeDisplay();
  updateAudioVolume();
});

function updateVolumeDisplay() {
  volumeDisplay.textContent = currentVolume;
}

 function updateAudioVolume() {
  const audio = document.getElementById("audio");
  audio.volume = currentVolume / 9; // Set volume between 0 and 1
}

document.body.appendChild(audio);
audio.play();


// Update the UI when the page loads
updateUI(playlist);
}


const style = document.createElement("style");
style.textContent = `
#player {
  border: 3px solid #785e17; 
  display: flex;
  flex-direction: row;
height:191px;
  background-Image: url("https://i.imgur.com/57IeWZc.png"); 
}

#display-box {
  display: flex;
  align-items: center;
  width: 50%;
}

#cover {
  width: 176px;
height:176px;
}

#info-container {
  display: flex;
  flex-direction: row;
  height:178px;
width:127px;
margin-top: 3px;
}

#song-info {
  width: 100%;
padding:5px;
}

#controls-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 10px;
  width:100%;
padding-top:15px;

}
.is-vertical #volumeSlider {
width: 16px;
appearance: slider-vertical;
}

#controls {
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 80%;
}

#progress-bar-container {
  width: 100%;
}

#progress-bar {
  width: 80%;
  margin: auto;
  display: flex;
  margin-top: 20px;
  appearance: none; 
  background: #ccc; 
  height: 5px; 
  border-radius: 5px; 
  outline: none; 
  cursor: pointer; 
}

#progress-bar::-webkit-slider-thumb {
  appearance: none; /* Remove default styling for consistency across browsers */
  width: 15px;
  height: 15px;
  background: #333; /* Slider thumb color */
  border-radius: 50%; /* Round thumb */
  cursor: pointer;
}

#progress-bar::-moz-range-thumb {
  width: 15px;
  height: 15px;
  background: #333;
  border-radius: 50%;
  cursor: pointer;
}

#question_form {
  color: #062c42;
}

.inner_window_question {
  background-color:#f1f1f1;
  border-radius: 5px; 
  position: relative;
  overflow: visible;
}

.inner_window_question h3 {
  background-color:#062c42;
  border-radius: 5px;
  box-shadow: 
  0 0 5px rgba(224, 255, 255, 0.5),  
  0 0 10px rgba(224, 255, 255, 0.3),  
  0 0 20px rgba(224, 255, 255, 0.1); 
}

@keyframes fadeInScale {
  0% {
      opacity: 0;
      transform: scale(0.8);
  }
  100% {
      opacity: 1;
      transform: scale(1);
  }
}

.overlay_window {
  position: absolute;
  opacity: 0; /* Start hidden */
  transform: scale(0.8); /* Start slightly smaller */
  background-color: #f1f1f1;
  border-radius: 5px;
  box-shadow:
      0 0 10px rgba(224, 255, 255, 0.5),  
      0 0 20px rgba(224, 255, 255, 0.3),  
      0 0 40px rgba(224, 255, 255, 0.1);
  
  height: 62%;
  width: 50%;
  top: 17%;
  left: 25%;
  
  border-style: double;
  border-color: #C9C9C9;

  animation: fadeInScale 0.3s cubic-bezier(0.3, 1.2, 0.2, 1) forwards;
}


.overlay_window h3 {
  background-color: #ffffff;
}

.overlay_window_content {
  color: #062c42;
}

#progress_bar h3 {
  color: #062c42;
  }

  .inner_inner_window h3 {
      color: #ffffff;
      }

  .inner_window_sign_display {
      background-color:#f1f1f1;
  }

  .overlay_window img {
    width: 251px;
    height: 134px;
}

#needle {
  position: absolute;        
  top: 0;
  left: 0;

  width: 127px;             
  height: 352px;

  /* Center pivot for rotation */
  transform-origin: 50% 50%;
  transform: rotate(-45deg); 

  transition: transform 0.3s ease;  
  pointer-events: none;    
  user-select: none;          
  z-index: 9999;                   
  outline: none; 
border: none;
}

.final_results_table {
  color: black;
}

#state_result_data_summary table {
  color: black;
}

#state_result_data_summary table th,
#state_result_data_summary table td {
  color: black; 
}

#overall_result_container,
#menu_container,
#state_result_container {
  background-color:transparent
}

#map_container{
  background-color:#f1f1f1;
  border-radius: 25px; 
  box-shadow: 
  0 0 10px rgba(224, 255, 255, 0.5),  
  0 0 20px rgba(224, 255, 255, 0.3),  
  0 0 40px rgba(224, 255, 255, 0.1); 
  position: relative;
  overflow: hidden;
}

.campaign_trail_start_emphasis {
  background-color: transparent;
}

.cheatIndicator {
position: absolute;
}
#difficulty_mult {
display: none;
}
#results_container{
  overflow: auto;
}
.person_image {
  position: sticky;
  top: 16px; 
  align-self: flex-start;
  z-index: 1;
  float: left;
  margin: 1.2em 1em 0;
  border: double;
  border-color: #785e17;
  height: 250px;
}


.final_results_table {
width: 66% !important;
table-layout: fixed !important;
border-collapse: collapse !important;
margin-right: 3% !important;
font-family: Georgia, serif !important;
background-color: #e6ecf5 !important;
box-shadow: 0 0 12px rgba(0, 0, 0, 0.2) !important;
}

.final_results_table th,
.final_results_table td {
padding: 2px 4px !important;
border: 1px solid #ccc !important;
text-align: center !important;
white-space: nowrap !important; /* â¬… Prevents wrapping */
}

.final_results_table td:first-child {
text-align: left !important;
width: 40% !important; /* â¬… Makes room for long names */
}


`;

document.head.appendChild(style);

async function appendStyle() {
  var metaTag=document.createElement('meta');
  metaTag.name = "viewport";
  metaTag.content = "width=device-width, initial-scale=1";
  document.getElementsByTagName('head')[0].appendChild(metaTag);

  if (!document.querySelector('#radio-option-style')) {
      let style = document.createElement('style');
      style.type = 'text/css';
      style.id = 'radio-option-style';
      style.innerHTML = `
      #visit_window {
          height: auto;
      }
      #visit_content {
          height: 79%;
      }

.person_button{
margin-top:0.2em
}
      @media only screen and (max-width: 768px) {

          #inner_window_2,
          #inner_window_3,
          #inner_window_4{
              overflow:visible;
          }
          #visit_window {
              font-size: 1.8em;
              width: 90%;
              left:5%;
          }
          .inner_window_question button,
              #visit_window button,
              #map_footer{
                  line-height: 2.5em;
              }
          #drop_down_area_state {
              margin-left: auto;
              margin-right: auto;
          }
      }
      `;

      document.head.appendChild(style);
  }
}
appendStyle();

const gameWindow_player = document.getElementById("game_window");
//use this function directly or put it in an event listener to start the music on the press of a certain button
setupMusicPlayer();


//#endcode
